using Mutagen.Bethesda;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Synthesis;
using RequiemAutoMagicPatcher.Models;

namespace RequiemAutoMagicPatcher;

public static class Program
{
    public static async Task<int> Main(string[] args)
    {
        return await SynthesisPipeline.Instance
            .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
            .SetAutogeneratedSettings(
                "Spell Patch Settings",
                "spellPatchSettings.json",
                out PatcherService._settings)
            .SetTypicalOpen(GameRelease.SkyrimSE, "RequiemAutoMagicPatcher.esp")
            .Run(args).ConfigureAwait(false);
    }

    private static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
    {
        var settings = PatcherService.Settings;
        if (settings.SelectedMods.Count == 0)
        {
            Console.WriteLine("No mods selected for patching.");
            return;
        }

        var patchFolder = CreatePatchFolder();

        foreach (var modKey in settings.SelectedMods) ProcessMod(state, modKey, patchFolder);

        Console.WriteLine("Finished Patching.");
    }

    private static string CreatePatchFolder()
    {
        var patchFolder = Path.Combine(Environment.CurrentDirectory, "RequiemAutoMagicPatcher");
        if (Directory.Exists(patchFolder))
        {
            Directory.Delete(patchFolder, true);
            Console.WriteLine("Folder 'RequiemAutoMagicPatcher' deleted.");
        }

        Directory.CreateDirectory(patchFolder);
        Console.WriteLine("Folder 'RequiemAutoMagicPatcher' created.");
        return patchFolder;
    }

    private static void ProcessMod(IPatcherState<ISkyrimMod, ISkyrimModGetter> state, ModKey modKey, string patchFolder)
    {
        var mod = state.LoadOrder[modKey].Mod;
        if (mod == null)
        {
            Console.WriteLine($"Mod {modKey} not found in the load order.");
            return;
        }

        Console.WriteLine($"Patching Mod: {modKey}");

        var changes = ProcessModChanges(state, mod);

        if (PatcherService.Settings.EnableCsvReportChanges) ExportToCsv(changes, modKey, patchFolder);
    }

    private static ModChanges ProcessModChanges(IPatcherState<ISkyrimMod, ISkyrimModGetter> state, ISkyrimModGetter mod)
    {
        var changes = new ModChanges();

        if (PatcherService.Settings.Books.PatchBooks)
            changes.BookChanges = PatcherService.BookProcessor.ProcessBooksValue(state, mod);

        if (!PatcherService.Settings.Spells.PatchSpells) return changes;

        changes.SpellBaseCostChanges =
            PatcherService.SpellProcessor.ProcessSpellsBaseCost(state, mod, PatcherService.Settings.Spells);
        changes.SpellFlagChanges = PatcherService.SpellProcessor.ProcessSpellFlags(state, mod);

        return changes;
    }

    private static void ExportToCsv(ModChanges changes, ModKey modKey, string patchFolder)
    {
        var modFolder = Path.Combine(patchFolder, modKey.FileName);
        Directory.CreateDirectory(modFolder);
        var csvFilePath = Path.Combine(modFolder, $"{modKey} - Changes.csv");
        Helpers.CsvHelper.ExportChangesToCsv(csvFilePath, changes.BookChanges, changes.SpellBaseCostChanges,
            changes.SpellFlagChanges);
    }
}